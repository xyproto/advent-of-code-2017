# -*- coding: utf-8 -*-

import commands
import glob
import multiprocessing
import os
import os.path
import subprocess
import sys

test_exes = [os.path.splitext(fn)[0] for fn in glob.glob("*_test.cpp")]

# Custom command line targets
if 'clean' in COMMAND_LINE_TARGETS: # Clean built executables and object files
  # Replace the "clean" argument with "-c", and list all targets
  cmd = [x for x in sys.argv if x != "clean"] + ["-c"] + ["main"] + test_exes
  # Clean
  status, output = commands.getstatusoutput(" ".join(cmd))
  print(os.linesep.join(output.split(os.linesep)[1:-1]))
  sys.exit(status)
elif 'testbuild' in COMMAND_LINE_TARGETS: # Build and run tests
  if not test_exes:
    print("Nothing to build")
    sys.exit(0)
  # Remove the "test" argument, and list all test-executable targets
  cmd = [x for x in sys.argv if x != "testbuild"] + test_exes
  # Build the tests
  status, output = commands.getstatusoutput(" ".join(cmd))
  print(os.linesep.join(output.split(os.linesep)[1:-1]))
  sys.exit(status)
elif 'test' in COMMAND_LINE_TARGETS: # Build and run tests
  if not test_exes:
    print("Nothing to build")
    sys.exit(0)
  # Remove the "test" argument, and list all test-executable targets
  cmd = [x for x in sys.argv if x != "test"] + test_exes
  # Build the tests
  output = subprocess.check_output(cmd)
  print(os.linesep.join(output.split(os.linesep)[1:-1]))
  # Run the tests
  for exe in test_exes:
    status, output = commands.getstatusoutput("./" + exe)
    print(output)
    if status != 0:
      sys.exit(status)
  sys.exit(0)
elif 'run' in COMMAND_LINE_TARGETS: # Build and run main
  # Remove the "run" argument, and add "main"
  cmd = [x for x in sys.argv if x != "run"] + ["main"]
  # Build main
  output = subprocess.check_output(cmd)
  print(os.linesep.join(output.split(os.linesep)[1:-1]))
  # Run main
  status, output = commands.getstatusoutput("./main")
  print(output)
  sys.exit(status)

# Set the number of jobs to the number of CPUs
SetOption('num_jobs', multiprocessing.cpu_count())

# Random build-order, for the possiblity of using the cache better
SetOption('random', 1)

# Compiler and compiler flags
env = Environment(CXX="g++",
                  CXXFLAGS='-std=c++17')

# debug=1
if int(ARGUMENTS.get('debug', 0)):
  env.Append(CXXFLAGS=' -O1 -g')
else:
  env.Append(CXXFLAGS=' -O2')

# clang=1
if int(ARGUMENTS.get('clang', 0)):
  env.Replace(CXX='clang++')

# Warnings and fail at first error
env.Append(CXXFLAGS=' -Wall -Wconversion -Wshadow -pedantic -Wfatal-errors')

# extra=1, even more warnings
if int(ARGUMENTS.get('extra', 0)):
  env.Append(CXXFLAGS=' -Wextra')

# Find all .cpp files that are not main.cpp and not *_test.cpp
dep_src = [fn for fn in glob.glob("*.cpp") if not fn.endswith("_test.cpp") and fn != "main.cpp"]

# Build main executable
main = env.Program("main", ["main.cpp"] + dep_src)

# Set up non-default targets for all the test executables (based on *_test.cpp)
for exe in test_exes:
  env.Program(exe, [exe + ".cpp"] + dep_src)

# Only main is the default target
Default(main)
